[versions]
kotlin = "2.2.0"
kotlinx-coroutines = "1.10.2"
jvm = "JVM_21"
jdk = "21"
target = "VERSION_21"
kover = "0.9.1"
sonarqube = "6.2.0.5505"

spring-kotlin-plugin = "2.2.0"
spring-framework-boot = "3.5.5"
spring-dependency-management = "1.1.7"
spring-cloud-dependency = "2025.0.0"
spring-cloud-aws = "3.4.0"
spring-google-grpc = "0.10.0"
gradle-avro-plugin = "0.0.12"

logback-classic = "1.5.18"
logback-kotlin = "7.0.7"

jackson = "2.19.2"

google-grpc-protobuf = "0.9.5"
google-grpc-protoc-compiler = "4.32.0"
google-grpc-protoc-java = "1.75.0"
google-grpc-protoc-kotlin = "1.4.3"

kafka-apache-avro = "1.12.0"
kafka-confluent-platform = "8.0.0"

netty-nio-client = "2.33.3"

junit-launcher = "1.11.4"
junit-pioneer = "2.3.0"
junit-jupiter = "5.11.4"

mockk-kotlin = "1.14.3"

system-stubs = "2.1.8"

micrometer-core = "1.15.3"
micrometer-context = "1.1.3"

[plugins]
kotlin-lang = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlinx-kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
sonarqube-scanner = { id = "org.sonarqube", version.ref = "sonarqube" }
spring-kotlin-plugin = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "spring-kotlin-plugin" }
spring-framework-boot = { id = "org.springframework.boot", version.ref = "spring-framework-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "spring-dependency-management" }
google-grpc-protobuf = { id = "com.google.protobuf", version.ref = "google-grpc-protobuf" }
gradle-avro-plugin = { id = "io.github.androa.gradle.plugin.avro", version.ref = "gradle-avro-plugin" }

[libraries]
kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
kotlin-stdlib-common = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlin-stdlib-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }

kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-jvm = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-slf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }

spring-boot-starter-framework = { module = "org.springframework.boot:spring-boot-starter" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-framework-messaging = { module = "org.springframework:spring-messaging" }
spring-boot-grpc-starter = { module = "org.springframework.grpc:spring-grpc-spring-boot-starter" }

spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-cloud-starter-test = { module = "org.springframework.cloud:spring-cloud-stream-test-binder" }
spring-grpc-starter-test = { module = "org.springframework.grpc:spring-grpc-test" }

spring-cloud-dependency = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "spring-cloud-dependency" }
spring-cloud-aws = { module = "io.awspring.cloud:spring-cloud-aws", version.ref = "spring-cloud-aws" }
spring-google-grpc = { module = "org.springframework.grpc:spring-grpc-dependencies", version.ref = "spring-google-grpc" }

google-grpc-protoc-compiler = { module = "com.google.protobuf:protoc", version.ref = "google-grpc-protoc-compiler" }
google-grpc-protoc-java = { module = "io.grpc:protoc-gen-grpc-java", version.ref = "google-grpc-protoc-java" }
google-grpc-protoc-kotlin = { module = "io.grpc:protoc-gen-grpc-kotlin", version.ref = "google-grpc-protoc-kotlin" }

spring-cloud-stream-core-all = { module = "org.springframework.cloud:spring-cloud-stream" }
spring-cloud-stream-binder-kafka = { module = "org.springframework.cloud:spring-cloud-stream-binder-kafka" }
spring-cloud-stream-schema-registry = { module = "org.springframework.cloud:spring-cloud-stream-schema-registry-client" }
spring-cloud-aws-starter-core = { module = "io.awspring.cloud:spring-cloud-aws-starter" }
spring-cloud-aws-starter-sqs = { module = "io.awspring.cloud:spring-cloud-aws-starter-sqs" }
spring-cloud-aws-starter-dynamodb = { module = "io.awspring.cloud:spring-cloud-aws-starter-dynamodb" }

log-logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback-classic" }
log-logback-kotlin = { module = "io.github.oshai:kotlin-logging-jvm", version.ref = "logback-kotlin" }

jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson" }
jackson-core = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-datatype-jdk8 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jdk8", version.ref = "jackson" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson-module-jaxb = { module = "com.fasterxml.jackson.module:jackson-module-jaxb-annotations", version.ref = "jackson" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-module-parameter = { module = "com.fasterxml.jackson.module:jackson-module-parameter-names", version.ref = "jackson" }

google-grpc-core-services = { module = "io.grpc:grpc-services", version.ref = "google-grpc-protoc-java"}
google-grpc-core-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "google-grpc-protoc-java"}
google-grpc-java-protobuf = { module = "com.google.protobuf:protobuf-java", version.ref = "google-grpc-protoc-compiler"}
google-grpc-java-util = { module = "com.google.protobuf:protobuf-java-util", version.ref = "google-grpc-protoc-compiler"}
google-grpc-kotlin-protobuf = { module = "com.google.protobuf:protobuf-kotlin", version.ref = "google-grpc-protoc-compiler"}
google-grpc-kotlin-stub = { module = "io.grpc:grpc-kotlin-stub", version.ref = "google-grpc-protoc-kotlin"}

apache-avro-core = { module = "org.apache.avro:avro", version.ref = "kafka-apache-avro" }
apache-avro-compiler = { module = "org.apache.avro:avro-compiler", version.ref = "kafka-apache-avro" }
confluent-kafka-avro-serializer = { module = "io.confluent:kafka-avro-serializer", version.ref = "kafka-confluent-platform" }
confluent-schema-registry-client = { module = "io.confluent:kafka-schema-registry-client", version.ref = "kafka-confluent-platform" }

aws-netty-nio-client = { module = "software.amazon.awssdk:netty-nio-client", version.ref = "netty-nio-client" }

junit-jupiter-launcher = { module = "org.junit.platform:junit-platform-launcher", version.ref = "junit-launcher" }
junit-platform-engine = { module = "org.junit.platform:junit-platform-engine", version.ref = "junit-launcher" }
junit-jupiter-pioneer = { module = "org.junit-pioneer:junit-pioneer", version.ref = "junit-pioneer" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit-jupiter" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit-jupiter" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit-jupiter" }
junit-jupiter-kotlin = { module = "org.jetbrains.kotlin:kotlin-test-junit5" }

mockk-kotlin = { module = "io.mockk:mockk", version.ref = "mockk-kotlin" }

system-stubs-core = { module = "uk.org.webcompere:system-stubs-core", version.ref = "system-stubs" }
system-stubs-jupiter = { module = "uk.org.webcompere:system-stubs-jupiter", version.ref = "system-stubs" }

micrometer-registry-core = { module = "io.micrometer:micrometer-core", version.ref = "micrometer-core" }
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer-core" }
micrometer-registry-context = { module = "io.micrometer:context-propagation", version.ref = "micrometer-context" }

[bundles]
kotlin-stdlib-all = [
  "kotlin-stdlib-jdk8",
  "kotlin-stdlib-common",
  "kotlin-stdlib-reflect",
]

kotlinx-coroutines-all = [
  "kotlinx-coroutines-core",
  "kotlinx-coroutines-jvm",
  "kotlinx-coroutines-slf4j",
  "kotlinx-coroutines-reactor",
]

spring-boot-base = [
  "spring-boot-starter-framework",
  "spring-boot-starter-web",
  "spring-boot-starter-webflux",
  "spring-boot-starter-validation",
  "spring-boot-starter-actuator",
  "spring-boot-framework-messaging",
]

spring-cloud-kafka = [
  "spring-cloud-stream-core-all",
  "spring-cloud-stream-binder-kafka",
  "spring-cloud-stream-schema-registry",
]

spring-cloud-aws = [
  "spring-cloud-aws-starter-core",
  "spring-cloud-aws-starter-sqs",
  "spring-cloud-aws-starter-dynamodb",
]

spring-cloud-dynamodb = [
  "spring-cloud-aws-starter-core",
  "spring-cloud-aws-starter-dynamodb",
]

logback-all = [
  "log-logback-classic",
  "log-logback-kotlin",
]

jackson-all = [
  "jackson-annotations",
  "jackson-core",
  "jackson-databind",
  "jackson-datatype-jdk8",
  "jackson-datatype-jsr310",
  "jackson-module-jaxb",
  "jackson-module-kotlin",
  "jackson-module-parameter",
]

grpc-all = [
  "google-grpc-core-services",
  "google-grpc-core-protobuf",
  "google-grpc-java-protobuf",
  "google-grpc-java-util",
  "google-grpc-kotlin-protobuf",
  "google-grpc-kotlin-stub",
]

kafka-all = [
  "apache-avro-core",
  "apache-avro-compiler",
  "confluent-kafka-avro-serializer",
  "confluent-schema-registry-client",
]

junit-all = [
  "kotlinx-coroutines-test",
  "junit-jupiter-pioneer",
  "junit-jupiter-api",
  "junit-jupiter-engine",
  "junit-platform-engine",
  "junit-jupiter-params",
  "junit-jupiter-kotlin",
  "mockk-kotlin",
  "system-stubs-core",
  "system-stubs-jupiter",
]

spring-test-all = [
  "spring-boot-starter-test",
  "spring-cloud-starter-test",
#  "spring-grpc-starter-test",
]

micrometer-all = [
  "micrometer-registry-core",
  "micrometer-registry-prometheus",
  "micrometer-registry-context",
]
