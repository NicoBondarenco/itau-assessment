services:

  localstack:
    container_name: "authorizer-localstack"
    image: localstack/localstack
    ports:
      - "9000:8080"
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      - DEBUG=1
      - SERVICES=sqs,dynamodb
      - DATA_DIR=/tmp/localstack/data
      - AWS_ACCESS_KEY_ID=38dc4428-dc4e-4703-b861-3d15454b2c14
      - AWS_SECRET_ACCESS_KEY=2c6ece77-f3c9-42ff-84b4-57db266ad21f
      - AWS_DEFAULT_REGION=sa-east-1
      - LOCALSTACK_VOLUME_DIR=/var/lib/localstack
      - INIT_SCRIPTS_PATH=/etc/localstack/init/ready.d
    volumes:
      - "./configuration/localstack/init.sh:/etc/localstack/init/ready.d/init-aws.sh:ro"
    networks:
      - authorizer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  zookeeper-server:
    image: confluentinc/cp-zookeeper:7.9.1
    container_name: "zookeeper-server"
    hostname: "zookeeper-server"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - authorizer-network

  kafka-broker:
    image: confluentinc/cp-server:7.9.1
    hostname: "kafka-broker"
    container_name: "kafka-broker"
    depends_on:
      - zookeeper-server
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-server:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "transaction-executed-event:1:1"
    networks:
      - authorizer-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  schema-registry:
    image: confluentinc/cp-schema-registry:7.9.1
    container_name: "schema-registry"
    hostname: "schema-registry"
    depends_on:
      kafka-broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper-server:2181'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-broker:29092
      SCHEMA_REGISTRY_DEBUG: 'true'
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1
      SCHEMA_REGISTRY_LEADER_ELIGIBILITY: 'true'
    networks:
      - authorizer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.9.1
    hostname: "rest-proxy"
    container_name: "rest-proxy"
    depends_on:
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - 8082:8082
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
    networks:
      - authorizer-network

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.9.1
    hostname: "control-center"
    container_name: "control-center"
    depends_on:
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    networks:
      - authorizer-network

  app-authorization:
    build: ./app-authorization
    container_name: "app-authorization"
    depends_on:
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      localstack:
        condition: service_healthy
    ports:
      - "8200:8200"
    environment:
      - AWS_REGION=sa-east-1
      - AWS_ACCESS_KEY=38dc4428-dc4e-4703-b861-3d15454b2c14
      - AWS_SECRET_KEY=2c6ece77-f3c9-42ff-84b4-57db266ad21f
      - AWS_DYNAMODB_ENDPOINT=http://localstack:4566
      - KAFKA_BROKERS=kafka-broker:29092
      - SCHEMA_REGISTRY_URL=http://schema-registry:8081
    networks:
      - authorizer-network

  app-validation:
    build: ./app-validation
    container_name: "app-validation"
    depends_on:
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      localstack:
        condition: service_healthy
    ports:
      - "8100:8100"
    environment:
      - AWS_REGION=sa-east-1
      - AWS_ACCESS_KEY=38dc4428-dc4e-4703-b861-3d15454b2c14
      - AWS_SECRET_KEY=2c6ece77-f3c9-42ff-84b4-57db266ad21f
      - AWS_DYNAMODB_ENDPOINT=http://localstack:4566
      - AWS_SQS_ENDPOINT=http://localstack:4566
      - GRPC_ENDPOINT=app-authorization:9090
    networks:
      - authorizer-network

  app-web:
    build: ./app-web
    container_name: "app-web"
    depends_on:
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      localstack:
        condition: service_healthy
    ports:
      - "8300:8300"
    environment:
      - AWS_REGION=sa-east-1
      - AWS_ACCESS_KEY=38dc4428-dc4e-4703-b861-3d15454b2c14
      - AWS_SECRET_KEY=2c6ece77-f3c9-42ff-84b4-57db266ad21f
      - AWS_DYNAMODB_ENDPOINT=http://localstack:4566
      - AWS_SQS_ENDPOINT=http://localstack:4566
    networks:
      - authorizer-network

networks:
  authorizer-network:
    driver: bridge
